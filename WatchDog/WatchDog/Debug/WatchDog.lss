
WatchDog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  000004e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4b  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005be  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000407  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 34       	cpi	r26, 0x4A	; 74
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  88:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <checkHanging>:
		restoreCard();
    }
}

void checkHanging(char inPin, char outPin, bool* oldValue, timer_t *statusTimer)	/*Function to check if a pin is stalling*/
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	69 83       	std	Y+1, r22	; 0x01
	/*	Pre-condition: Takes the inputPin and outputPin for each processor and compares them.	*/
	/*	Post-condition: Returns if the selected pins are stalling or not.						*/
	bool newValue = PIND & (1 << inPin );
  9c:	69 b1       	in	r22, 0x09	; 9
  9e:	e1 e0       	ldi	r30, 0x01	; 1
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	df 01       	movw	r26, r30
  a4:	02 c0       	rjmp	.+4      	; 0xaa <checkHanging+0x1a>
  a6:	aa 0f       	add	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <checkHanging+0x16>
  ae:	cd 01       	movw	r24, r26
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	86 23       	and	r24, r22
  b4:	97 23       	and	r25, r23
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	89 2b       	or	r24, r25
  ba:	09 f4       	brne	.+2      	; 0xbe <checkHanging+0x2e>
  bc:	60 e0       	ldi	r22, 0x00	; 0
	if (newValue != *oldValue)						/*If the Values are different...*/
  be:	fa 01       	movw	r30, r20
  c0:	80 81       	ld	r24, Z
  c2:	68 17       	cp	r22, r24
  c4:	91 f0       	breq	.+36     	; 0xea <checkHanging+0x5a>
	{
		/*Set Pin 13 LED high*/
		PORTB = (1<<PORTB5);
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	85 b9       	out	0x05, r24	; 5

		/*Setting the pin High*/
		PORTC = PORTC |(1 << outPin);
  ca:	78 b1       	in	r23, 0x08	; 8
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	09 80       	ldd	r0, Y+1	; 0x01
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <checkHanging+0x48>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <checkHanging+0x44>
  dc:	87 2b       	or	r24, r23
  de:	88 b9       	out	0x08, r24	; 8

		/*Storing the current state*/
		*oldValue = newValue;
  e0:	60 83       	st	Z, r22
		/*Resetting the inactive timer*/
		resetTimer(statusTimer);
  e2:	c9 01       	movw	r24, r18
  e4:	0e 94 c3 01 	call	0x386	; 0x386 <resetTimer>
  e8:	12 c0       	rjmp	.+36     	; 0x10e <checkHanging+0x7e>
	}	
	else if(timerDone(statusTimer))		/*If Pin Values are the same...Check to see if the timer has run out. If it has, then the pin is stalling and needs to be reset*/
  ea:	c9 01       	movw	r24, r18
  ec:	0e 94 6d 01 	call	0x2da	; 0x2da <timerDone>
  f0:	88 23       	and	r24, r24
  f2:	69 f0       	breq	.+26     	; 0x10e <checkHanging+0x7e>
	{
		PORTB = (0<<PORTB5);
  f4:	15 b8       	out	0x05, r1	; 5
		mustRebootPin = 1;		/*Trip Flag*/
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <mustRebootPin+0x1>
  fe:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mustRebootPin>
		pinToReboot = &outPin;		/*Store the pin number*/
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <pinToReboot+0x1>
 10a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <pinToReboot>
	}		
	return;
}
 10e:	0f 90       	pop	r0
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <pinReboot>:

void pinReboot(char pin)
{
	/*	Pre-Condition: Takes in the Pin determined to be stalling					*/
	/*	Post-Condition: Reboots pin and returns bootWaiting to be true				*/
	switch(pin)
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	a9 f0       	breq	.+42     	; 0x144 <pinReboot+0x2e>
 11a:	58 f0       	brcs	.+22     	; 0x132 <pinReboot+0x1c>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	d1 f4       	brne	.+52     	; 0x154 <pinReboot+0x3e>
	{
		case  CARD1Out:
		{
			resettingCARD1 = true;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <resettingCARD1>
			PORTC = PORTC & ~(1 << pin);				/*Set Pin High*/
 126:	43 98       	cbi	0x08, 3	; 8
			resetTimer(&BootTimer[0]);
 128:	82 e2       	ldi	r24, 0x22	; 34
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 c3 01 	call	0x386	; 0x386 <resetTimer>
			break;
 130:	11 c0       	rjmp	.+34     	; 0x154 <pinReboot+0x3e>
		}
		case  CARD2Out:
		{
			resettingCARD2 = true;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <resettingCARD2>
			PORTC = PORTC & ~(1 << pin);				/*Set Pin High*/
 138:	40 98       	cbi	0x08, 0	; 8
			resetTimer(&BootTimer[1]);
 13a:	8a e2       	ldi	r24, 0x2A	; 42
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 c3 01 	call	0x386	; 0x386 <resetTimer>
			
			break;
 142:	08 c0       	rjmp	.+16     	; 0x154 <pinReboot+0x3e>
		}
		case  CARD3Out:
		{
			resettingCARD3 = true;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <resettingCARD3>
			PORTC = PORTC & ~(1 << pin);				/*Set Pin High*/
 14a:	41 98       	cbi	0x08, 1	; 8
			resetTimer(&BootTimer[2]);
 14c:	82 e3       	ldi	r24, 0x32	; 50
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 c3 01 	call	0x386	; 0x386 <resetTimer>
			break;
		}
		default:	//should never reach this
		break;
	}
	resetTimer(&ResetTimer);	//naming needs changed
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 c3 01 	call	0x386	; 0x386 <resetTimer>
 15c:	08 95       	ret

0000015e <restoreCard>:
}

void restoreCard()
{
	if(timerDone(&ResetTimer))
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 6d 01 	call	0x2da	; 0x2da <timerDone>
 166:	88 23       	and	r24, r24
 168:	a9 f0       	breq	.+42     	; 0x194 <restoreCard+0x36>
	{
		if(resettingCARD1)
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <resettingCARD1>
 16e:	88 23       	and	r24, r24
 170:	19 f0       	breq	.+6      	; 0x178 <restoreCard+0x1a>
		{
			PORTC = PORTC |(1 << CARD1Out);
 172:	43 9a       	sbi	0x08, 3	; 8
			resettingCARD1 = false;
 174:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <resettingCARD1>
		}
		if(resettingCARD2)
 178:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <resettingCARD2>
 17c:	88 23       	and	r24, r24
 17e:	19 f0       	breq	.+6      	; 0x186 <restoreCard+0x28>
		{
			PORTC = PORTC |(1 << CARD2Out);
 180:	40 9a       	sbi	0x08, 0	; 8
			resettingCARD2 = false;
 182:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <resettingCARD2>
		}
		if(resettingCARD3)
 186:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <resettingCARD3>
 18a:	88 23       	and	r24, r24
 18c:	19 f0       	breq	.+6      	; 0x194 <restoreCard+0x36>
		{
			PORTC = PORTC |(1 << CARD3Out);
 18e:	41 9a       	sbi	0x08, 1	; 8
			resettingCARD3 = false;
 190:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <resettingCARD3>
 194:	08 95       	ret

00000196 <getNewReadings>:
	#ifdef CARD1
	oldValueCARD1 = PIND & (1 << CARD1);
	#endif

	#ifdef CARD2
	oldValueCARD2 = PIND & (1 << CARD2);
 196:	89 b1       	in	r24, 0x09	; 9
 198:	83 fb       	bst	r24, 3
 19a:	88 27       	eor	r24, r24
 19c:	80 f9       	bld	r24, 0
 19e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <oldValueCARD2>
 1a2:	08 95       	ret

000001a4 <main>:

timer_t ResetTimer,cardTimer1,cardTimer2,cardTimer3;
timer_t BootTimer[3];
int main()
{
	DDRD = 0x00;//0b11111111;		/*Set Input Pins */
 1a4:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xFF;//0b00000000;		/*Set Output Pins*/
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;					/*Set output HIGH*/
 1aa:	88 b9       	out	0x08, r24	; 8
	//PORTC = 0x00;				/*Set Output Low (Allow Power to Pass)*/
	//-------------------------------
	/*PIN 13 LED*/
	DDRB = 1 << PORTB5;
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	84 b9       	out	0x04, r24	; 4
	PORTB = 1<<PORTB5;
 1b0:	85 b9       	out	0x05, r24	; 5
	//----------------------------------
		/*Initialize the timers*/
	initTimers();
 1b2:	0e 94 55 01 	call	0x2aa	; 0x2aa <initTimers>
		
	//Global Timer Interrupt enable-----
	sei();	
 1b6:	78 94       	sei
	
	//----------------------------------
		/*Initialize variables*/
	fullReboot = 0;
 1b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	mustRebootPin = 0;
 1c0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mustRebootPin+0x1>
 1c4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mustRebootPin>
	TIMSK0 = 0 << OCIE0A;
 1c8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	//Resetting the timer overflow
	TCNT1 = 0;
 1cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/*Get initial Readings*/ 
	getNewReadings();
 1d4:	0e 94 cb 00 	call	0x196	; 0x196 <getNewReadings>

	/*Set the inital timers*/
	setTimerInterval(&BootTimer[0],COMPLETE_BOOT_TIME);
 1d8:	48 e5       	ldi	r20, 0x58	; 88
 1da:	5b e1       	ldi	r21, 0x1B	; 27
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	82 e2       	ldi	r24, 0x22	; 34
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
	setTimerInterval(&BootTimer[1],COMPLETE_BOOT_TIME);
 1e8:	48 e5       	ldi	r20, 0x58	; 88
 1ea:	5b e1       	ldi	r21, 0x1B	; 27
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	8a e2       	ldi	r24, 0x2A	; 42
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
	setTimerInterval(&BootTimer[2],COMPLETE_BOOT_TIME);
 1f8:	48 e5       	ldi	r20, 0x58	; 88
 1fa:	5b e1       	ldi	r21, 0x1B	; 27
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
	setTimerInterval(&cardTimer1,TIME_INACTIVE);
 208:	40 ed       	ldi	r20, 0xD0	; 208
 20a:	57 e0       	ldi	r21, 0x07	; 7
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	8d e3       	ldi	r24, 0x3D	; 61
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
	setTimerInterval(&cardTimer2,TIME_INACTIVE);
 218:	40 ed       	ldi	r20, 0xD0	; 208
 21a:	57 e0       	ldi	r21, 0x07	; 7
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	8a e1       	ldi	r24, 0x1A	; 26
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
	setTimerInterval(&cardTimer3,TIME_INACTIVE);
 228:	40 ed       	ldi	r20, 0xD0	; 208
 22a:	57 e0       	ldi	r21, 0x07	; 7
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	8b e0       	ldi	r24, 0x0B	; 11
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
	setTimerInterval(&ResetTimer, HIGH_TIME);
 238:	4a ef       	ldi	r20, 0xFA	; 250
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
		}
		#endif

		#ifdef CARD2

		if(timerDoneNoReset(&BootTimer[1]))
 248:	8a e2       	ldi	r24, 0x2A	; 42
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 9a 01 	call	0x334	; 0x334 <timerDoneNoReset>
 250:	88 23       	and	r24, r24
 252:	21 f1       	breq	.+72     	; 0x29c <main+0xf8>
		{
			checkHanging(CARD2, CARD2Out, &oldValueCARD2, &cardTimer2);
 254:	2a e1       	ldi	r18, 0x1A	; 26
 256:	31 e0       	ldi	r19, 0x01	; 1
 258:	45 e4       	ldi	r20, 0x45	; 69
 25a:	51 e0       	ldi	r21, 0x01	; 1
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 48 00 	call	0x90	; 0x90 <checkHanging>
			if(mustRebootPin == 1)
 264:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mustRebootPin>
 268:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <mustRebootPin+0x1>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	d1 f4       	brne	.+52     	; 0x2a4 <main+0x100>
			{
				pinReboot(CARD2Out);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 8b 00 	call	0x116	; 0x116 <pinReboot>
				mustRebootPin = 0;
 276:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mustRebootPin+0x1>
 27a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mustRebootPin>

				oldValueCARD2 = PIND & (1 << CARD2);
 27e:	89 b1       	in	r24, 0x09	; 9
 280:	83 fb       	bst	r24, 3
 282:	88 27       	eor	r24, r24
 284:	80 f9       	bld	r24, 0
 286:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <oldValueCARD2>
			
				/*Set cardTimer2's wait_time*/
				setTimerInterval(&cardTimer2, WAIT_TIME);
 28a:	42 ec       	ldi	r20, 0xC2	; 194
 28c:	51 e0       	ldi	r21, 0x01	; 1
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	8a e1       	ldi	r24, 0x1A	; 26
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 bd 01 	call	0x37a	; 0x37a <setTimerInterval>
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <main+0x100>
			}
		}
		else
		{
			resetTimer(&cardTimer2);
 29c:	8a e1       	ldi	r24, 0x1A	; 26
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 c3 01 	call	0x386	; 0x386 <resetTimer>
		{
			resetTimer(&cardTimer3);
		}
		#endif

		restoreCard();
 2a4:	0e 94 af 00 	call	0x15e	; 0x15e <restoreCard>
    }
 2a8:	cf cf       	rjmp	.-98     	; 0x248 <main+0xa4>

000002aa <initTimers>:
unsigned long globalTime;

unsigned long millis(void)
{
    return globalTime;
}
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	85 bd       	out	0x25, r24	; 37
 2ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	86 bb       	out	0x16, r24	; 22
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	87 bd       	out	0x27, r24	; 39
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2ce:	16 bc       	out	0x26, r1	; 38
 2d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2d8:	08 95       	ret

000002da <timerDone>:

bool timerDone(timer_t * t)
{
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	fc 01       	movw	r30, r24
#include "stdlib.h"
unsigned long globalTime;

unsigned long millis(void)
{
    return globalTime;
 2e0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalTime>
 2e4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <globalTime+0x1>
 2e8:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <globalTime+0x2>
 2ec:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <globalTime+0x3>
}

bool timerDone(timer_t * t)
{
    if(abs(millis()-t->lastMillis) > t->timerInterval)
 2f0:	24 81       	ldd	r18, Z+4	; 0x04
 2f2:	35 81       	ldd	r19, Z+5	; 0x05
 2f4:	ac 01       	movw	r20, r24
 2f6:	42 1b       	sub	r20, r18
 2f8:	53 0b       	sbc	r21, r19
 2fa:	9a 01       	movw	r18, r20
 2fc:	22 f4       	brpl	.+8      	; 0x306 <timerDone+0x2c>
 2fe:	44 27       	eor	r20, r20
 300:	55 27       	eor	r21, r21
 302:	42 1b       	sub	r20, r18
 304:	53 0b       	sbc	r21, r19
 306:	05 2e       	mov	r0, r21
 308:	00 0c       	add	r0, r0
 30a:	66 0b       	sbc	r22, r22
 30c:	77 0b       	sbc	r23, r23
 30e:	00 81       	ld	r16, Z
 310:	11 81       	ldd	r17, Z+1	; 0x01
 312:	22 81       	ldd	r18, Z+2	; 0x02
 314:	33 81       	ldd	r19, Z+3	; 0x03
 316:	04 17       	cp	r16, r20
 318:	15 07       	cpc	r17, r21
 31a:	26 07       	cpc	r18, r22
 31c:	37 07       	cpc	r19, r23
 31e:	30 f4       	brcc	.+12     	; 0x32c <timerDone+0x52>
    {
        t->lastMillis=millis();
 320:	84 83       	std	Z+4, r24	; 0x04
 322:	95 83       	std	Z+5, r25	; 0x05
 324:	a6 83       	std	Z+6, r26	; 0x06
 326:	b7 83       	std	Z+7, r27	; 0x07
        return true;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	01 c0       	rjmp	.+2      	; 0x32e <timerDone+0x54>
    }
    else
    {
        return false;
 32c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <timerDoneNoReset>:

bool timerDoneNoReset(timer_t * t)
{
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	fc 01       	movw	r30, r24
 33a:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <globalTime>
 33e:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <globalTime+0x1>
 342:	84 81       	ldd	r24, Z+4	; 0x04
 344:	95 81       	ldd	r25, Z+5	; 0x05
 346:	28 1b       	sub	r18, r24
 348:	39 0b       	sbc	r19, r25
 34a:	a9 01       	movw	r20, r18
 34c:	22 f4       	brpl	.+8      	; 0x356 <timerDoneNoReset+0x22>
 34e:	44 27       	eor	r20, r20
 350:	55 27       	eor	r21, r21
 352:	42 1b       	sub	r20, r18
 354:	53 0b       	sbc	r21, r19
 356:	05 2e       	mov	r0, r21
 358:	00 0c       	add	r0, r0
 35a:	66 0b       	sbc	r22, r22
 35c:	77 0b       	sbc	r23, r23
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	00 81       	ld	r16, Z
 362:	11 81       	ldd	r17, Z+1	; 0x01
 364:	22 81       	ldd	r18, Z+2	; 0x02
 366:	33 81       	ldd	r19, Z+3	; 0x03
 368:	04 17       	cp	r16, r20
 36a:	15 07       	cpc	r17, r21
 36c:	26 07       	cpc	r18, r22
 36e:	37 07       	cpc	r19, r23
 370:	08 f0       	brcs	.+2      	; 0x374 <timerDoneNoReset+0x40>
 372:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return false;
	}
	
}
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <setTimerInterval>:

void setTimerInterval(timer_t * t, unsigned long interval)
{
    t->timerInterval= interval;
 37a:	fc 01       	movw	r30, r24
 37c:	40 83       	st	Z, r20
 37e:	51 83       	std	Z+1, r21	; 0x01
 380:	62 83       	std	Z+2, r22	; 0x02
 382:	73 83       	std	Z+3, r23	; 0x03
 384:	08 95       	ret

00000386 <resetTimer>:
}

void resetTimer(timer_t * t)
{
    t->lastMillis=millis();
 386:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <globalTime>
 38a:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <globalTime+0x1>
 38e:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <globalTime+0x2>
 392:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <globalTime+0x3>
 396:	fc 01       	movw	r30, r24
 398:	44 83       	std	Z+4, r20	; 0x04
 39a:	55 83       	std	Z+5, r21	; 0x05
 39c:	66 83       	std	Z+6, r22	; 0x06
 39e:	77 83       	std	Z+7, r23	; 0x07
 3a0:	08 95       	ret

000003a2 <globalTimerTracker>:
}

//Call this function in your timer interrupt that fires at 1ms
void globalTimerTracker( )
{
    globalTime++;
 3a2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalTime>
 3a6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <globalTime+0x1>
 3aa:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <globalTime+0x2>
 3ae:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <globalTime+0x3>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <globalTime>
 3bc:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <globalTime+0x1>
 3c0:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <globalTime+0x2>
 3c4:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <globalTime+0x3>
 3c8:	08 95       	ret

000003ca <__vector_11>:
	/*reset TCNT of both timers */
	TCNT0 = 0;
	TCNT1 = 0;
}
//TIMER1 COMPA
ISR(TIMER1_COMPA_vect) {
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	TCNT1 = 0;
 3ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	globalTimerTracker( );
 3f4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <globalTimerTracker>
	//PORTB = PORTB ^(1 << PORTB5);
	//TIFR1 = 1<<TOV1;
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	ef 93       	push	r30
 43a:	ff 93       	push	r31
	TCNT0 = 0;
 43c:	16 bc       	out	0x26, r1	; 38
	TIFR0  = 1<<TOV0;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	85 bb       	out	0x15, r24	; 21
	globalTimerTracker();
 442:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <globalTimerTracker>
}
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
